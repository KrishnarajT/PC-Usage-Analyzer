[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pygetwindow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygetwindow",
        "description": "pygetwindow",
        "detail": "pygetwindow",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "schedule",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schedule",
        "description": "schedule",
        "detail": "schedule",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "plotly.offline",
        "description": "plotly.offline",
        "isExtraImport": true,
        "detail": "plotly.offline",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "dashboard.views",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "generic",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "AnalysisConfig",
        "kind": 6,
        "importPath": "PCUsageAnalyzer.analysis.apps",
        "description": "PCUsageAnalyzer.analysis.apps",
        "peekOfCode": "class AnalysisConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"analysis\"",
        "detail": "PCUsageAnalyzer.analysis.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.analysis.urls",
        "description": "PCUsageAnalyzer.analysis.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.index, name=\"analysis\"),\n]",
        "detail": "PCUsageAnalyzer.analysis.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.analysis.views",
        "description": "PCUsageAnalyzer.analysis.views",
        "peekOfCode": "def index(request):\n    return render(request, \"analysis/index.html\")",
        "detail": "PCUsageAnalyzer.analysis.views",
        "documentation": {}
    },
    {
        "label": "DashboardConfig",
        "kind": 6,
        "importPath": "PCUsageAnalyzer.dashboard.apps",
        "description": "PCUsageAnalyzer.dashboard.apps",
        "peekOfCode": "class DashboardConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"dashboard\"",
        "detail": "PCUsageAnalyzer.dashboard.apps",
        "documentation": {}
    },
    {
        "label": "MainApplication",
        "kind": 6,
        "importPath": "PCUsageAnalyzer.dashboard.MainApp",
        "description": "PCUsageAnalyzer.dashboard.MainApp",
        "peekOfCode": "class MainApplication:\n    def __init__(self):\n        self.thread_interval_ms = 1000\n        self.registration_interval_ms = 10000\n        self.record = False\n        self.counter = Counter()\n        self.start_time_dict = {}\n        self.finish = False\n        self.started_app = False\n        self.data_directory = os.path.join(",
        "detail": "PCUsageAnalyzer.dashboard.MainApp",
        "documentation": {}
    },
    {
        "label": "CleanupMiddleware",
        "kind": 6,
        "importPath": "PCUsageAnalyzer.dashboard.middlewares",
        "description": "PCUsageAnalyzer.dashboard.middlewares",
        "peekOfCode": "class CleanupMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        response = self.get_response(request)\n        print(\"Processing response\")\n        # Your code here\n        return response",
        "detail": "PCUsageAnalyzer.dashboard.middlewares",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.dashboard.urls",
        "description": "PCUsageAnalyzer.dashboard.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.load_homepage, name=\"home\"),\n    path(\"dash\", views.load_dashboard, name=\"dashboard\"),\n    path(\"startapp\", views.start_app, name=\"startapp\"),\n    path(\"pauseorresume\", views.pause_or_resume_app, name=\"pauseorresume\"),\n    path(\"printdb\", views.print_db, name=\"printdb\"),\n    path(\"stopapp\", views.stop_app_and_logout, name=\"stopapp\"),\n    path(\"start_fresh\", views.start_fresh, name=\"start_fresh\"),\n    path(\"export_raw\", views.export_raw, name=\"export_raw\"),\n    path(",
        "detail": "PCUsageAnalyzer.dashboard.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def index(request):\n    return render(request, \"dashboard/index.html\")\n@login_required\ndef load_dashboard(request):\n    if app.get_app_started() == False:\n        app.set_finish(False)\n        app.init_db()\n        schedule.every(app.thread_interval_ms).seconds.do(app.run)\n        # start the thread for core app\n        t = threading.Thread(target=run_core)",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "load_dashboard",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def load_dashboard(request):\n    if app.get_app_started() == False:\n        app.set_finish(False)\n        app.init_db()\n        schedule.every(app.thread_interval_ms).seconds.do(app.run)\n        # start the thread for core app\n        t = threading.Thread(target=run_core)\n        t.start()\n        print(\"started app thread. \")\n        app.set_app_started(True)",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "load_homepage",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def load_homepage(request):\n    return render(request, \"dashboard/index.html\")\n@login_required\ndef start_app(request):\n    app.set_finish(False)\n    app.init_db()\n    schedule.every(app.thread_interval_ms).seconds.do(app.run)\n    # start the thread for core app\n    t = threading.Thread(target=run_core)\n    t.start()",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "start_app",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def start_app(request):\n    app.set_finish(False)\n    app.init_db()\n    schedule.every(app.thread_interval_ms).seconds.do(app.run)\n    # start the thread for core app\n    t = threading.Thread(target=run_core)\n    t.start()\n    app.set_record(True)\n    redirect(\"dashboard\")\n    recording = app.get_record()",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "pause_or_resume_app",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def pause_or_resume_app(request):\n    app.pause_or_resume()\n    print(app.get_record())\n    return render(request, \"dashboard/dashboard.html\")\n@login_required\ndef stop_app_and_logout(request):\n    app.set_finish(True)\n    app.cleanup()\n    schedule.clear()\n    logout(request)",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "stop_app_and_logout",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def stop_app_and_logout(request):\n    app.set_finish(True)\n    app.cleanup()\n    schedule.clear()\n    logout(request)\n    return redirect(\"login\")\n@login_required\ndef print_db(request):\n    app.print_db()\n    # print(app.get_db())",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "print_db",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def print_db(request):\n    app.print_db()\n    # print(app.get_db())\n    return render(request, \"dashboard/dashboard.html\")\ndef run_core():\n    while True:\n        if app.get_record() == True:\n            schedule.run_pending()\n            # print(\"next job\", schedule.next_run())\n        if app.get_finish() == True:",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "run_core",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def run_core():\n    while True:\n        if app.get_record() == True:\n            schedule.run_pending()\n            # print(\"next job\", schedule.next_run())\n        if app.get_finish() == True:\n            break\n        time.sleep(app.thread_interval_ms)\ndef start_fresh(request):\n    app.start_fresh()",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "start_fresh",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def start_fresh(request):\n    app.start_fresh()\n    return render(request, \"dashboard/dashboard.html\")\ndef export_raw(request):\n    app.export_raw()\n    return render(request, \"dashboard/dashboard.html\")\ndef export_collaborative_data(request):\n    app.export_collaborative_data()\n    return render(request, \"dashboard/dashboard.html\")\ndef flip_idle_detection(request):",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "export_raw",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def export_raw(request):\n    app.export_raw()\n    return render(request, \"dashboard/dashboard.html\")\ndef export_collaborative_data(request):\n    app.export_collaborative_data()\n    return render(request, \"dashboard/dashboard.html\")\ndef flip_idle_detection(request):\n    app.flip_idle_detection()\n    return render(request, \"dashboard/dashboard.html\")\ndef test(request):",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "export_collaborative_data",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def export_collaborative_data(request):\n    app.export_collaborative_data()\n    return render(request, \"dashboard/dashboard.html\")\ndef flip_idle_detection(request):\n    app.flip_idle_detection()\n    return render(request, \"dashboard/dashboard.html\")\ndef test(request):\n    #     df = app.get_db()\n    #     fig = go.Figure(data=[go.Bar(y=[2, 1, 3])])\n    #     fig.update_layout(",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "flip_idle_detection",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def flip_idle_detection(request):\n    app.flip_idle_detection()\n    return render(request, \"dashboard/dashboard.html\")\ndef test(request):\n    #     df = app.get_db()\n    #     fig = go.Figure(data=[go.Bar(y=[2, 1, 3])])\n    #     fig.update_layout(\n    #         autosize=False,\n    #         width=200,\n    #         height=200,",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def test(request):\n    #     df = app.get_db()\n    #     fig = go.Figure(data=[go.Bar(y=[2, 1, 3])])\n    #     fig.update_layout(\n    #         autosize=False,\n    #         width=200,\n    #         height=200,\n    #         margin=dict(l=0, r=0, b=0, t=0, pad=4),\n    #     )\n    #     plot_div = plot(fig, output_type=\"div\", include_plotlyjs=False)",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "get_counter",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def get_counter(request):\n    counter = app.get_counter()\n    return JsonResponse(counter, safe=False)\ndef get_recording(request):\n    recording = app.get_record()\n    return JsonResponse(recording, safe=False)\ndef get_idle_detection(request):\n    idle_detection = app.get_idle_detection()\n    return JsonResponse(idle_detection, safe=False)\ndef get_intervals_ms(request):",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "get_recording",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def get_recording(request):\n    recording = app.get_record()\n    return JsonResponse(recording, safe=False)\ndef get_idle_detection(request):\n    idle_detection = app.get_idle_detection()\n    return JsonResponse(idle_detection, safe=False)\ndef get_intervals_ms(request):\n    intervals_ms = app.get_intervals_ms()\n    return JsonResponse(intervals_ms, safe=False)",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "get_idle_detection",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def get_idle_detection(request):\n    idle_detection = app.get_idle_detection()\n    return JsonResponse(idle_detection, safe=False)\ndef get_intervals_ms(request):\n    intervals_ms = app.get_intervals_ms()\n    return JsonResponse(intervals_ms, safe=False)",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "get_intervals_ms",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "def get_intervals_ms(request):\n    intervals_ms = app.get_intervals_ms()\n    return JsonResponse(intervals_ms, safe=False)",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.dashboard.views",
        "description": "PCUsageAnalyzer.dashboard.views",
        "peekOfCode": "app = MainApp.MainApplication()\n@login_required\ndef index(request):\n    return render(request, \"dashboard/index.html\")\n@login_required\ndef load_dashboard(request):\n    if app.get_app_started() == False:\n        app.set_finish(False)\n        app.init_db()\n        schedule.every(app.thread_interval_ms).seconds.do(app.run)",
        "detail": "PCUsageAnalyzer.dashboard.views",
        "documentation": {}
    },
    {
        "label": "MainTrackerConfig",
        "kind": 6,
        "importPath": "PCUsageAnalyzer.main_tracker.apps",
        "description": "PCUsageAnalyzer.main_tracker.apps",
        "peekOfCode": "class MainTrackerConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"main_tracker\"",
        "detail": "PCUsageAnalyzer.main_tracker.apps",
        "documentation": {}
    },
    {
        "label": "NotificationsConfig",
        "kind": 6,
        "importPath": "PCUsageAnalyzer.notifications.apps",
        "description": "PCUsageAnalyzer.notifications.apps",
        "peekOfCode": "class NotificationsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"notifications\"",
        "detail": "PCUsageAnalyzer.notifications.apps",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.asgi",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-4edt+5t+x4zsttw6@u%ajy!szjxu8=+^x9b6-)u@x%&g62!wu=\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-4edt+5t+x4zsttw6@u%ajy!szjxu8=+^x9b6-)u@x%&g62!wu=\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"user_auth\",",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"user_auth\",\n    \"analysis\",\n    \"main_tracker\",",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"PCUsageAnalyzer.urls\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "ROOT_URLCONF = \"PCUsageAnalyzer.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [\n            BASE_DIR / \"templates\",\n        ],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [\n            BASE_DIR / \"templates\",\n        ],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "WSGI_APPLICATION = \"PCUsageAnalyzer.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\nLOGIN_URL = \"/\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\nLOGIN_URL = \"/\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nLOGIN_URL = \"/\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "USE_TZ = True\nLOGIN_URL = \"/\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "LOGIN_URL = \"/\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\nSTATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"static\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.urls",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"django.contrib.auth.urls\")),\n    path(\"\", include(\"user_auth.urls\")),\n    path(\"dashboard/\", include(\"dashboard.urls\")),\n    path(\"analysis/\", include(\"analysis.urls\")),\n    path(\"settings/\", include(\"settings.urls\")),\n]\n# set up admin site\nadmin.site.site_header = \"PC Usage Analyzer Admin\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.urls",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.urls",
        "peekOfCode": "admin.site.site_header = \"PC Usage Analyzer Admin\"\nadmin.site.site_title = \"PC Usage Analyzer Admin Portal\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.urls",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.urls",
        "peekOfCode": "admin.site.site_title = \"PC Usage Analyzer Admin Portal\"",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.PCUsageAnalyzer.wsgi",
        "description": "PCUsageAnalyzer.PCUsageAnalyzer.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "PCUsageAnalyzer.PCUsageAnalyzer.wsgi",
        "documentation": {}
    },
    {
        "label": "SettingsConfig",
        "kind": 6,
        "importPath": "PCUsageAnalyzer.settings.apps",
        "description": "PCUsageAnalyzer.settings.apps",
        "peekOfCode": "class SettingsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"settings\"",
        "detail": "PCUsageAnalyzer.settings.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.settings.urls",
        "description": "PCUsageAnalyzer.settings.urls",
        "peekOfCode": "urlpatterns = [path(\"\", views.load_settings, name=\"settings\")]",
        "detail": "PCUsageAnalyzer.settings.urls",
        "documentation": {}
    },
    {
        "label": "load_settings",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.settings.views",
        "description": "PCUsageAnalyzer.settings.views",
        "peekOfCode": "def load_settings(request):\n    return render(request, \"settings/index.html\")",
        "detail": "PCUsageAnalyzer.settings.views",
        "documentation": {}
    },
    {
        "label": "UserAuthConfig",
        "kind": 6,
        "importPath": "PCUsageAnalyzer.user_auth.apps",
        "description": "PCUsageAnalyzer.user_auth.apps",
        "peekOfCode": "class UserAuthConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"user_auth\"",
        "detail": "PCUsageAnalyzer.user_auth.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "PCUsageAnalyzer.user_auth.urls",
        "description": "PCUsageAnalyzer.user_auth.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.login_user, name=\"login\"),\n    path(\"signup_user\", views.signup_user, name=\"signup\"),\n    path(\"logout_user\", views.logout_user, name=\"logout\"),\n    path(\"profile\", views.profile, name=\"profile\"),\n    path(\"about\", views.about, name=\"about\"),\n]",
        "detail": "PCUsageAnalyzer.user_auth.urls",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.user_auth.views",
        "description": "PCUsageAnalyzer.user_auth.views",
        "peekOfCode": "def login_user(request):\n    if request.method == \"POST\":\n        username = request.POST[\"username\"]\n        password = request.POST[\"password\"]\n        # check if the user exists\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            # if user exists, log them in\n            login(request, user)\n            return redirect(\"/dashboard/dash\")",
        "detail": "PCUsageAnalyzer.user_auth.views",
        "documentation": {}
    },
    {
        "label": "signup_user",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.user_auth.views",
        "description": "PCUsageAnalyzer.user_auth.views",
        "peekOfCode": "def signup_user(request):\n    if request.method == \"POST\":\n        print(request.POST)\n        # get form data\n        username = request.POST.get(\"username\", \"\")\n        password = request.POST.get(\"users_pass\", \"\")\n        password_confirm = request.POST.get(\"users_pass_again\", \"\")\n        # dont do anything if they are empty\n        if not username or not password or not password_confirm:\n            messages.error(request, f\"Please fill all the Fields\")",
        "detail": "PCUsageAnalyzer.user_auth.views",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.user_auth.views",
        "description": "PCUsageAnalyzer.user_auth.views",
        "peekOfCode": "def logout_user(request):\n    logout(request)\n    return redirect(\"login\")\ndef about(request):\n    return render(request, \"user_auth/about.html\")\n@login_required\ndef profile(request):\n    return render(request, \"user_auth/profile.html\")",
        "detail": "PCUsageAnalyzer.user_auth.views",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.user_auth.views",
        "description": "PCUsageAnalyzer.user_auth.views",
        "peekOfCode": "def about(request):\n    return render(request, \"user_auth/about.html\")\n@login_required\ndef profile(request):\n    return render(request, \"user_auth/profile.html\")",
        "detail": "PCUsageAnalyzer.user_auth.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.user_auth.views",
        "description": "PCUsageAnalyzer.user_auth.views",
        "peekOfCode": "def profile(request):\n    return render(request, \"user_auth/profile.html\")",
        "detail": "PCUsageAnalyzer.user_auth.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "PCUsageAnalyzer.manage",
        "description": "PCUsageAnalyzer.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"PCUsageAnalyzer.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "PCUsageAnalyzer.manage",
        "documentation": {}
    },
    {
        "label": "MainApplication",
        "kind": 6,
        "importPath": "src.terminal_ui",
        "description": "src.terminal_ui",
        "peekOfCode": "class MainApplication:\n    def __init__(self):\n        self.thread_interval_s = 1\n        self.registration_interval_s = 10\n        self.record = False\n        self.counter = Counter()\n        self.start_time_dict = {}\n        self.finish = False\n        self.data_directory = os.path.join(\n            os.path.expanduser(\"~\\Documents\"), \"PC Usage Analyzer Data\"",
        "detail": "src.terminal_ui",
        "documentation": {}
    },
    {
        "label": "clean_string",
        "kind": 2,
        "importPath": "src.terminal_ui",
        "description": "src.terminal_ui",
        "peekOfCode": "def clean_string(given_string):\n    if given_string == \"\":\n        given_string = \"Desktop\"\n    if \",\" in given_string:\n        given_string = given_string.replace(\",\", \" \")\n    # if there are any non ascii characters, remove them\n    try:\n        given_string = \"\".join(i for i in given_string if ord(i) < 128)\n    except Exception as e:\n        print(e)",
        "detail": "src.terminal_ui",
        "documentation": {}
    },
    {
        "label": "user_io",
        "kind": 2,
        "importPath": "src.terminal_ui",
        "description": "src.terminal_ui",
        "peekOfCode": "def user_io():\n    \"\"\"\n    Manages user input and output.\n    \"\"\"\n    while True:\n        user_input = input(\n            \"Enter \\n'1' to Play / Pause, \\n'2' to start a blank file, \\n'3' to export raw data to CSV, JSON, HTML\\n'4' Export Nicely to CSV, JSON, HTML \\n'5' to Enable/Disable Idle Detection\\n'6' to Exit: \\n\\n\\n\"\n        )\n        try:\n            if user_input == \"0\":",
        "detail": "src.terminal_ui",
        "documentation": {}
    },
    {
        "label": "core",
        "kind": 2,
        "importPath": "src.terminal_ui",
        "description": "src.terminal_ui",
        "peekOfCode": "def core():\n    \"\"\"\n    Manages the core logic of the application.\n    \"\"\"\n    while True:\n        if app.get_record() == True:\n            schedule.run_pending()\n            # print(\"next job\", schedule.next_run())\n        if app.finish == True:\n            break",
        "detail": "src.terminal_ui",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.terminal_ui",
        "description": "src.terminal_ui",
        "peekOfCode": "app = MainApplication()\ndef user_io():\n    \"\"\"\n    Manages user input and output.\n    \"\"\"\n    while True:\n        user_input = input(\n            \"Enter \\n'1' to Play / Pause, \\n'2' to start a blank file, \\n'3' to export raw data to CSV, JSON, HTML\\n'4' Export Nicely to CSV, JSON, HTML \\n'5' to Enable/Disable Idle Detection\\n'6' to Exit: \\n\\n\\n\"\n        )\n        try:",
        "detail": "src.terminal_ui",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "WDEnv.Scripts.activate_this",
        "description": "WDEnv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "WDEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "WDEnv.Scripts.activate_this",
        "description": "WDEnv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "WDEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "WDEnv.Scripts.activate_this",
        "description": "WDEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "WDEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "WDEnv.Scripts.activate_this",
        "description": "WDEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "WDEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "WDEnv.Scripts.activate_this",
        "description": "WDEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "WDEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "WDEnv.Scripts.activate_this",
        "description": "WDEnv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "WDEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "WDEnv.Scripts.activate_this",
        "description": "WDEnv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "WDEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "WDEnv.Scripts.activate_this",
        "description": "WDEnv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "WDEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "WDEnv.Scripts.activate_this",
        "description": "WDEnv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "WDEnv.Scripts.activate_this",
        "documentation": {}
    }
]